#!/usr/bin/env groovy

node {
    stage 'Git checkout'
    echo 'Checking out git repository'
    git url: 'https://github.com/jamesfalkner/coolstore-microservice'

    stage 'Build inventory-service with maven'
    echo 'Building project'
    def mvnHome = tool 'M3'
    def javaHome = tool 'jdk8'

    stage 'Build image and deploy in Dev'
    echo 'Building docker image and deploying to Dev'
    buildProject(env.PROD_PROJECT + '-dev')

    stage 'Automated tests'
    echo 'This stage simulates automated tests'
    sh "${mvnHome}/bin/mvn -B -Dmaven.test.failure.ignore clean package verify"

    stage 'Deploy to QA'
    echo 'Deploying to QA'
    deployProject(env.PROD_PROJECT + '-dev', env.PROD_PROJECT + '-qa')

    stage 'Wait for approval'
    input 'Approve to production?'

    stage 'Deploy to production'
    echo 'Deploying to production'
    deployProject(env.PROD_PROJECT + '-dev', env.PROD_PROJECT)
}

// Creates a Build and triggers it
def buildProject(String project){
    projectSet(project)

    // build inventory service and wait for it to finish
    sh "oc new-app --file=openshift-templates/inventory-service.json -p MAVEN_MIRROR_URL='${env.MAVEN_MIRROR_URL}' || oc start-build inventory "
    sh "oc logs -f bc/inventory"
}

// Tag the ImageStream from an original project to force a deployment
def deployProject(String origProject, String project){
    projectSet(project)
    sh "oc policy add-role-to-user system:image-puller system:serviceaccount:${project}:default -n ${origProject}"

    // disable triggers in project so a deployment isn't triggered next time the image is updated in origProject
    sh "oc patch dc/inventory -p \'{"spec":{"triggers":[]}}\'"
    sh "oc tag ${origProject}/inventory:latest ${project}/inventory:latest"
    sh "oc deploy inventory --latest"
}

// Login and set the project
def projectSet(String project){
    //Use a credential called openshift-dev
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'openshift-dev', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        sh "oc login --insecure-skip-tls-verify=true -u $env.USERNAME -p $env.PASSWORD"
    }
    sh "oc new-project ${project} || echo 'Project exists'"
    sh "oc project ${project}"
}

